import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';

import 'firebase_options.dart'; // Generated by flutterfire configure
import 'providers/user_provider.dart';
import 'services/auth_service.dart';
import 'screens/login_page.dart';
import 'screens/main_app_screen.dart';
import 'screens/splash_screen.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => UserProvider()),
        Provider<AuthService>(create: (_) => AuthService(FirebaseAuth.instance)),
        StreamProvider<User?>(
          create: (context) => context.read<AuthService>().authStateChanges,
          initialData: null,
        ),
      ],
      child: MaterialApp(
        title: 'Scripture Sage',
        theme: ThemeData(
          primarySwatch: Colors.teal, // Example theme
          visualDensity: VisualDensity.adaptivePlatformDensity,
        ),
        debugShowCheckedModeBanner: false, // Ensure this is false
        // For development, we'll start directly at the main screen.
        initialRoute: '/',
        // The AuthenticationWrapper will decide whether to show LoginPage or MainAppScreen
        routes: {
          '/': (context) => const MainAppScreen(), // Bypass splash and login for development
          '/login': (context) => const LoginPage(),
          '/home': (context) => const MainAppScreen(),
          '/auth_wrapper': (context) => const AuthenticationWrapper(),
        },
      ),
    );
  }
}

class AuthenticationWrapper extends StatelessWidget {
  const AuthenticationWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    final firebaseUser = context.watch<User?>();
    final userProvider = context.watch<UserProvider>();

    if (firebaseUser != null) {
      // Update UserProvider if Firebase user exists
      // This could be more sophisticated, e.g., fetching more user details from Firestore
      WidgetsBinding.instance.addPostFrameCallback((_) {
        userProvider.setUser(firebaseUser);
      });
      return const MainAppScreen();
    }
    return const LoginPage();
  }
}
